// 2. Не выполняя кода, ответить, что выведет браузер и почему:

if (!("a" in window)) {
    var a = 1;
}
alert(a);
/*
undefined

Происходит всплытие переменной "а" в область "window",
в то время как присвоение значения производится только внутри if,
условие которого не выполнятся
*/

var b = function a(x) {
    x && a(--x);
};
alert(a);

/*
a is not defined

Функциональное выражение b выполняется в том месте, где существует, всплытия не происходит.
В переменной a видим то, что ей присвоили, однако присвоения нет, нет в глобальной области видимости.
*/

function a(x) {
    return x * 2;
}

var a;
alert(a);

/*
описание func

в процессе чтения кода создается функция и переменная,у которой имя будет совпадать с именем функции,
поэтому выводится описание функции, которое было присвоено переменной а при создании функции.
*/

function b(x, y, a) {
    arguments[2] = 10;
    alert(a);
}

b(1, 2, 3);

/*
10

через параметры передаем 1,2,3,
далее внутри функции у нас создается объект arguments который является "дубликатом" b,
меняем/переприсваиваем третий параметр (по индексу 2) и выводим его значение.
*/

function a() {
    alert(this);
}

a.call(null);
/*
object window

Метод call() выполняет функцию как метод другого объекта, при этом параметр - this,
если параметр = null или undefined, вызываемой функции передается глобальный объект в качестве значения this,
в нашем случае window.
*/
